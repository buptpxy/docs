这个快速入门指南将教你如何使用React连接TypeScript。 最后，将会获得：

一个使用React和TypeScript的项目
用TSLint项目检查
用Jest和Enzyme进行测试，
Redux流程管理

1.安装 create-react-app
  npm -g install create-react-app

2.创建我们的项目,项目名称为 my-app
  create-react-app my-app --scripts-version=react-scripts-ts

3.运行项目
  npm run start
  服务器运行在http://localhost:3000

4.测试项目
  npm run test
  
5.创建生产构建
  npm run build
  这将分别在./build/static/js和./build/static/css中创建优化的JS和CSS构建。
  大多数时间您不需要运行生产版本，但如果您需要测量类似于应用程序最终大小，这将非常有用。

6.创建组件
  src/components/Hello.tsx

7.渲染调用
  在我们已经编写了我们的组件，让我们来看看src/index.tsx，并用<Hello ... />的渲染替换我们的<App />渲染。
  首先我们在文件的顶部引入它：
  import Hello from './components/Hello';
  然后更改我们的渲染调用：
  ReactDOM.render(
    <Hello name="TypeScript" enthusiasmLevel={10} />,
    document.getElementById('root') as HTMLElement
  );

8.键入断言
  document.getElementById('root') as HTMLElement
  这种语法称为类型断言，有时也称为转换

9.添加样式
  为了调整我们的Hello组件，我们可以在src/components/Hello.css创建一个CSS文件。
  在src/components/Hello.tsx中，我们将添加以下导入。
  import './Hello.css';

10.用Jest编写测试
   安装Enzyme
   npm install -D enzyme @types/enzyme react-addons-test-utils
   创建一个src/components/Hello.test.tsx的文件，与之前的Hello.tsx相邻。

11.添加状态管理，设置动作来源
   添加两个按钮来控制我们的Hello组件的enthusiasm level

12.安装 Redux
   npm install -S redux react-redux @types/react-redux
   
13.定义app状态
   创建一个名为src/types/index.tsx的文件，该文件将包含整个程序中可能使用的类型的定义。

14.添加行为
   首先创建一组我们的应用程序可以在src/constants/index.tsx中响应的消息类型
   接下来，我们将创建一组可以在src/actions/index.tsx中创建这些操作的动作和函数

15.添加reducer
   我们的reducer将在src/reducers/index.tsx下。其功能是确保增量提高1点，减量降低1点，但enthusiasm level 不低于1

16.制作container
   首先让我们更新src/components/Hello.tsx，以便它可以修改状态
   然后我们将这些回调绑定到我们添加到组件中的两个新按钮上。
   现在我们的组件已更新，我们已经准备好将其包装到一个容器中。创建一个名为src/containers/Hello.tsx的文件

17.创建store
   回到src/index.tsx，为了把这些都放在一起，我们需要创建一个初始状态的store，并将其与所有的reducer进行配置。
   用./src/containers/Hello替换我们对./src/components/Hello，并使用react-redux的Provider将我们的props与我们的容器连接起来

18.添加一个Webpack插件，可能需要利用create-react-app 提供的"eject"功能
   npm run eject


